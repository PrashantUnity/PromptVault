@inject IPromptService PromptService
@inject IJSRuntime JSRuntime

<div class="prompt-card-enhanced group cursor-pointer stagger-item @GetCategoryGradientClasses(Prompt.Category)">
    <!-- Card Header with Title and Actions -->
    <div class="flex items-start justify-between mb-5">
        <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100 line-clamp-1 group-hover:text-gray-900 dark:group-hover:text-white transition-colors duration-300 flex-1 pr-2">
            @Prompt.Title
        </h3>
        <div class="flex items-center gap-1">
            <button 
                @onclick="() => ToggleFavorite()"
                class="p-1.5 rounded-lg hover:bg-gray-200/50 dark:hover:bg-white/20 transition-colors duration-200 @(IsFavorite ? "text-red-600 dark:text-red-400" : "text-gray-600 dark:text-gray-300")"
                title="@(IsFavorite ? "Remove from favorites" : "Add to favorites")">
                <i data-lucide="heart" class="h-4 w-4 @(IsFavorite ? "fill-current" : "")"></i>
            </button>
            <button 
                @onclick="() => SetRating(5)"
                class="p-1.5 rounded-lg hover:bg-gray-200/50 dark:hover:bg-white/20 transition-colors duration-200 text-gray-600 dark:text-gray-300"
                title="Rate this prompt">
                <i data-lucide="star" class="h-4 w-4"></i>
            </button>
        </div>
    </div>
    
    <!-- Category and Difficulty Tags -->
    <div class="flex items-center gap-2 mb-5">
        <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium @GetCategoryTagClasses(Prompt.Category)">
            @GetCategoryName(Prompt.Category)
        </span>
        @if (!string.IsNullOrEmpty(Prompt.Difficulty))
        {
            <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium @GetDifficultyTagClasses(Prompt.Difficulty)">
                @Prompt.Difficulty
            </span>
        }
    </div>
    
    <!-- Description in White Box -->
    <div class="bg-white/95 backdrop-blur-sm rounded-xl p-5 mb-5 shadow-lg">
        <p class="text-sm text-gray-700 line-clamp-3 leading-relaxed">
            @Prompt.Description
        </p>
    </div>
    
    <!-- Hashtags -->
    @if (Prompt.Tags.Any())
    {
        <div class="flex flex-wrap gap-2 mb-5">
            @foreach (var tag in Prompt.Tags.Take(4))
            {
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300">
                    #@tag
                </span>
            }
            @if (Prompt.Tags.Length > 4)
            {
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300">
                    +@(Prompt.Tags.Length - 4)
                </span>
            }
        </div>
    }
    
    <!-- Action Buttons -->
    <div class="flex items-center gap-3 mt-auto">
        <button 
            @onclick="() => CopyPrompt()"
            class="flex-1 bg-purple-600 hover:bg-purple-700 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 flex items-center justify-center gap-2 shadow-lg hover:shadow-xl"
            title="Copy Prompt">
            <i data-lucide="copy" class="h-4 w-4"></i>
            <span>Copy</span>
        </button>
        <button 
            @onclick="() => ViewPrompt()"
            class="bg-gray-200/80 dark:bg-white/20 hover:bg-gray-300/80 dark:hover:bg-white/30 text-gray-800 dark:text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 flex items-center justify-center gap-2 backdrop-blur-sm"
            title="View details">
            <i data-lucide="eye" class="h-4 w-4"></i>
            <span>View</span>
        </button>
    </div>
</div>

@code {
    [Parameter] public Prompt Prompt { get; set; } = new();
    [Parameter] public EventCallback<string> OnPromptClick { get; set; }
    [Parameter] public EventCallback<string> OnToggleFavorite { get; set; }
    [Parameter] public EventCallback<(string promptId, UserRating rating)> OnSetRating { get; set; }

    private bool IsFavorite => PromptService.State.Favorites.Contains(Prompt.Id);
    private int UserRating => PromptService.State.UserRatings.ContainsKey(Prompt.Id) ? PromptService.State.UserRatings[Prompt.Id].Rating : 0;

    protected override async Task OnInitializedAsync()
    {
        PromptService.StateChanged += StateHasChanged;
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeIcons");
        }
    }

    private async Task ToggleFavorite()
    {
        await OnToggleFavorite.InvokeAsync(Prompt.Id);
    }

    private async Task CopyPrompt()
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", Prompt.Content);
    }

    private async Task ViewPrompt()
    {
        await OnPromptClick.InvokeAsync(Prompt.Id);
    }

    private async Task SetRating(int rating)
    {
        var userRating = new UserRating
        {
            PromptId = Prompt.Id,
            Rating = rating,
            Liked = rating >= 4
        };
        
        await OnSetRating.InvokeAsync((Prompt.Id, userRating));
    }

    private string GetCategoryGradientClasses(string category)
    {
        return category switch
        {
            "marketing" => "bg-gradient-to-br from-pink-100/80 via-pink-200/80 to-purple-200/80",
            "development" => "bg-gradient-to-br from-green-100/80 via-emerald-200/80 to-blue-200/80",
            "creative-writing" => "bg-gradient-to-br from-purple-100/80 via-purple-200/80 to-pink-200/80",
            "business" => "bg-gradient-to-br from-blue-100/80 via-blue-200/80 to-indigo-200/80",
            "education" => "bg-gradient-to-br from-emerald-100/80 via-green-200/80 to-teal-200/80",
            "technology" => "bg-gradient-to-br from-orange-100/80 via-orange-200/80 to-red-200/80",
            "fun" => "bg-gradient-to-br from-yellow-100/80 via-yellow-200/80 to-orange-200/80",
            "productivity" => "bg-gradient-to-br from-violet-100/80 via-purple-200/80 to-indigo-200/80",
            "data-analysis" => "bg-gradient-to-br from-cyan-100/80 via-blue-200/80 to-indigo-200/80",
            _ => "bg-gradient-to-br from-gray-100/80 via-gray-200/80 to-gray-300/80"
        };
    }

    private string GetCategoryClasses(string category)
    {
        return category switch
        {
            "marketing" => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300",
            "development" => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            "creative-writing" => "bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300",
            "business" => "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300",
            "education" => "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/20 dark:text-emerald-300",
            "technology" => "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300",
            "fun" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300",
            "productivity" => "bg-violet-100 text-violet-800 dark:bg-violet-900/20 dark:text-violet-300",
            "data-analysis" => "bg-cyan-100 text-cyan-800 dark:bg-cyan-900/20 dark:text-cyan-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300"
        };
    }

    private string GetDifficultyClasses(string difficulty)
    {
        return difficulty switch
        {
            "beginner" => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            "intermediate" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300",
            "advanced" => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300"
        };
    }

    private string GetCategoryName(string category)
    {
        return PromptService.State.Categories.FirstOrDefault(c => c.Id == category)?.Name ?? category;
    }

    private string GetCategoryTagClasses(string category)
    {
        return category switch
        {
            "marketing" => "bg-pink-200 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300",
            "development" => "bg-green-200 text-green-800 dark:bg-green-900/30 dark:text-green-300",
            "creative-writing" => "bg-purple-200 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300",
            "business" => "bg-blue-200 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
            "education" => "bg-emerald-200 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300",
            "technology" => "bg-orange-200 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300",
            "fun" => "bg-yellow-200 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300",
            "productivity" => "bg-violet-200 text-violet-800 dark:bg-violet-900/30 dark:text-violet-300",
            "data-analysis" => "bg-cyan-200 text-cyan-800 dark:bg-cyan-900/30 dark:text-cyan-300",
            _ => "bg-gray-200 text-gray-800 dark:bg-gray-800 dark:text-gray-300"
        };
    }

    private string GetDifficultyTagClasses(string difficulty)
    {
        return difficulty switch
        {
            "beginner" => "bg-green-200 text-green-800 dark:bg-green-900/30 dark:text-green-300",
            "intermediate" => "bg-yellow-200 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300",
            "advanced" => "bg-red-200 text-red-800 dark:bg-red-900/30 dark:text-red-300",
            _ => "bg-gray-200 text-gray-800 dark:bg-gray-800 dark:text-gray-300"
        };
    }

    public void Dispose()
    {
        PromptService.StateChanged -= StateHasChanged;
    }
}
