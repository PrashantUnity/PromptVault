@inject IPromptService PromptService
@inject IJSRuntime JSRuntime

@if (IsVisible && SelectedPrompt != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" @onclick="CloseModal">
        <div class="bg-card border border-border rounded-lg max-w-4xl w-full max-h-[90vh] mx-4" @onclick:stopPropagation="true">
            <div class="p-6">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-2xl font-semibold">@SelectedPrompt.Title</h2>
                    <button @onclick="CloseModal" class="p-2 rounded-md hover:bg-accent">
                        <i data-lucide="x" class="h-5 w-5"></i>
                    </button>
                </div>
                
                <div class="space-y-4">
                    <!-- Category and difficulty -->
                    <div class="flex items-center gap-4">
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @GetCategoryClasses(SelectedPrompt.Category)">
                            @GetCategoryName(SelectedPrompt.Category)
                        </span>
                        @if (!string.IsNullOrEmpty(SelectedPrompt.Difficulty))
                        {
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @GetDifficultyClasses(SelectedPrompt.Difficulty)">
                                @SelectedPrompt.Difficulty
                            </span>
                        }
                    </div>

                    <!-- Description -->
                    @if (!string.IsNullOrEmpty(SelectedPrompt.Description))
                    {
                        <div>
                            <h3 class="text-lg font-medium mb-2">Description</h3>
                            <p class="text-muted-foreground">@SelectedPrompt.Description</p>
                        </div>
                    }

                    <!-- Content -->
                    <div>
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="text-lg font-medium">Prompt Content</h3>
                            <button @onclick="CopyContent" class="px-3 py-1 text-sm bg-primary text-primary-foreground rounded-md hover:bg-primary/90">
                                <i data-lucide="copy" class="h-4 w-4 inline mr-1"></i>
                                Copy
                            </button>
                        </div>
                        <div class="bg-muted rounded-lg p-4 font-mono text-sm whitespace-pre-wrap max-h-96 overflow-y-auto">
                            @SelectedPrompt.Content
                        </div>
                    </div>

                    <!-- Tags -->
                    @if (SelectedPrompt.Tags.Any())
                    {
                        <div>
                            <h3 class="text-lg font-medium mb-2">Tags</h3>
                            <div class="flex flex-wrap gap-2">
                                @foreach (var tag in SelectedPrompt.Tags)
                                {
                                    <span class="inline-flex items-center px-2 py-1 rounded text-sm bg-muted text-muted-foreground">
                                        #@tag
                                    </span>
                                }
                            </div>
                        </div>
                    }

                    <!-- Placeholders -->
                    @if (SelectedPrompt.Placeholders.Any())
                    {
                        <div>
                            <h3 class="text-lg font-medium mb-2">Placeholders</h3>
                            <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3">
                                <p class="text-sm text-yellow-800 dark:text-yellow-200 mb-2">
                                    Replace these placeholders with your specific information:
                                </p>
                                <ul class="list-disc list-inside space-y-1">
                                    @foreach (var placeholder in SelectedPrompt.Placeholders)
                                    {
                                        <li class="text-sm text-yellow-700 dark:text-yellow-300">[@placeholder]</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }

                    <!-- Stats -->
                    <div class="flex items-center gap-6 text-sm text-muted-foreground">
                        <div class="flex items-center gap-1">
                            <i data-lucide="eye" class="h-4 w-4"></i>
                            <span>@SelectedPrompt.UsageCount uses</span>
                        </div>
                        @if (SelectedPrompt.AverageRating > 0)
                        {
                            <div class="flex items-center gap-1">
                                <i data-lucide="star" class="h-4 w-4 text-yellow-400 fill-current"></i>
                                <span>@SelectedPrompt.AverageRating.ToString("F1") rating</span>
                            </div>
                        }
                        <div class="flex items-center gap-1">
                            <i data-lucide="calendar" class="h-4 w-4"></i>
                            <span>Created @SelectedPrompt.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="flex items-center gap-2 pt-4 border-t">
                        <button @onclick="ToggleFavorite" class="px-4 py-2 rounded-md border @(IsFavorite ? "border-red-200 bg-red-50 text-red-700 hover:bg-red-100" : "border-border hover:bg-accent")">
                            <i data-lucide="heart" class="h-4 w-4 inline mr-2 @(IsFavorite ? "fill-current" : "")"></i>
                            @(IsFavorite ? "Remove from Favorites" : "Add to Favorites")
                        </button>
                        <button @onclick="RatePrompt" class="px-4 py-2 rounded-md border border-border hover:bg-accent">
                            <i data-lucide="star" class="h-4 w-4 inline mr-2"></i>
                            Rate Prompt
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback OnClose { get; set; }

    private Prompt? SelectedPrompt { get; set; }
    private bool IsFavorite => SelectedPrompt != null && PromptService.State.Favorites.Contains(SelectedPrompt.Id);

    public void ShowPrompt(Prompt prompt)
    {
        SelectedPrompt = prompt;
        IsVisible = true;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        SelectedPrompt = null;
        await OnClose.InvokeAsync();
    }

    private async Task CopyContent()
    {
        if (SelectedPrompt != null)
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", SelectedPrompt.Content);
        }
    }

    private async Task ToggleFavorite()
    {
        if (SelectedPrompt != null)
        {
            await PromptService.ToggleFavoriteAsync(SelectedPrompt.Id);
        }
    }

    private async Task RatePrompt()
    {
        // TODO: Implement rating modal
    }

    private string GetCategoryClasses(string category)
    {
        return category switch
        {
            "marketing" => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300",
            "development" => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            "creative-writing" => "bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300",
            "business" => "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300",
            "education" => "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/20 dark:text-emerald-300",
            "technology" => "bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300",
            "fun" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300",
            "productivity" => "bg-violet-100 text-violet-800 dark:bg-violet-900/20 dark:text-violet-300",
            "data-analysis" => "bg-cyan-100 text-cyan-800 dark:bg-cyan-900/20 dark:text-cyan-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300"
        };
    }

    private string GetDifficultyClasses(string difficulty)
    {
        return difficulty switch
        {
            "beginner" => "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300",
            "intermediate" => "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300",
            "advanced" => "bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300"
        };
    }

    private string GetCategoryName(string category)
    {
        return PromptService.State.Categories.FirstOrDefault(c => c.Id == category)?.Name ?? category;
    }
}
