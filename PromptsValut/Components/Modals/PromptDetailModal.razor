@using PromptsValut.Constants

@if (IsVisible && SelectedPrompt != null)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" @onclick="CloseModal">
        <div class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg max-w-4xl w-full max-h-[90vh] mx-4" @onclick:stopPropagation="true">
            <!-- Header -->
            <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-2xl font-semibold text-gray-900 dark:text-white">@SelectedPrompt.Title</h2>
                    <button @onclick="CloseModal" class="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800">
                        @((MarkupString)SvgIcons.X)
                    </button>
                </div>
                
                <!-- Tags -->
                <div class="flex items-center gap-2 mb-4">
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @GetCategoryClasses(SelectedPrompt.Category)">
                        @GetCategoryName(SelectedPrompt.Category)
                    </span>
                    @if (SelectedPrompt.Tags != null)
                    {
                        @foreach (var tag in SelectedPrompt.Tags.Take(3))
                        {
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-sm bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300">
                                #@tag
                            </span>
                        }
                    }
                </div>

                <!-- Tabs and Edit Button -->
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
                        <button @onclick="async () => await SetActiveTab(0)" class="flex items-center px-3 py-2 text-sm font-medium rounded-md @(activeTab == 0 ? "bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300")">
                            @((MarkupString)SvgIcons.FileText)
                            Original Prompt
                        </button>
                        <button @onclick="async () => await SetActiveTab(1)" 
                                disabled="@isEditingPrompt"
                                class="flex items-center px-3 py-2 text-sm font-medium rounded-md @(isEditingPrompt ? "text-gray-400 dark:text-gray-600 cursor-not-allowed" : (activeTab == 1 ? "bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"))">
                            @((MarkupString)SvgIcons.Settings)
                            Customize @(isEditingPrompt ? "(Disabled while editing)" : "")
                        </button>
                    </div>
                    <button @onclick="async () => await ToggleEditMode()" class="flex items-center px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700">
                        @if (isEditingPrompt)
                        {
                            @((MarkupString)SvgIcons.X)
                        }
                        else
                        {
                            @((MarkupString)SvgIcons.Edit)
                        }
                        @(isEditingPrompt ? "Cancel" : "Edit Prompt")
                    </button>
                </div>
            </div>

            <!-- Content -->
            <div class="p-6 overflow-y-auto max-h-[calc(90vh-200px)]">
                @if (activeTab == 0)
                {
                    <!-- Original Prompt Tab -->
                    <!-- Prompt Content Section -->
                    <div class="mb-6">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3 uppercase tracking-wide">PROMPT CONTENT</h3>
                        @if (isEditingPrompt)
                        {
                            <div class="space-y-3">
                                <p class="text-sm text-gray-600 dark:text-gray-400">Edit the prompt content below:</p>
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300">
                                    Editing Mode
                                </span>
                                <textarea @bind="editedPromptContent" 
                                          class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
                                          rows="8"
                                          placeholder="Enter your prompt content here..."></textarea>
                                
                                <!-- Copy buttons for edited prompt -->
                                <div class="flex gap-3 mt-4">
                                    <button @onclick="CopyEditedPrompt" class="flex-1 px-4 py-2 text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 rounded-md flex items-center justify-center">
                                        @((MarkupString)SvgIcons.Copy)
                                        Copy Edited Prompt
                                    </button>
                                    <button @onclick="CopyOriginalPrompt" class="flex-1 px-4 py-2 text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 rounded-md flex items-center justify-center">
                                        @((MarkupString)SvgIcons.Copy)
                                        Copy Original Prompt
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 font-mono text-sm whitespace-pre-wrap border border-gray-200 dark:border-gray-700">
                                @SelectedPrompt.Content
                            </div>
                        }
                    </div>

                    <!-- Placeholders -->
                    @if (SelectedPrompt.Placeholders.Any())
                    {
                        <div class="mt-6">
                            <h4 class="text-sm font-semibold text-gray-900 dark:text-white mb-2 uppercase tracking-wide">Placeholders</h4>
                            <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3">
                                <p class="text-sm text-yellow-800 dark:text-yellow-200 mb-2">
                                    Replace these placeholders with your specific information:
                                </p>
                                <div class="flex flex-wrap gap-2">
                                    @foreach (var placeholder in SelectedPrompt.Placeholders)
                                    {
                                        <span class="inline-flex items-center px-2 py-1 rounded text-sm bg-yellow-100 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-200">
                                            [@placeholder]
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    
                }
                else
                {
                    <!-- Customize Tab -->
                    <div class="space-y-6">
                        @if (parsedFields?.Fields.Any() == true)
                        {
                            @foreach (var field in parsedFields.Fields)
                            {
                                <div>
                                    <label class="block text-sm font-medium text-gray-900 dark:text-white mb-1">
                                        @field.Name
                                        @if (field.Required)
                                        {
                                            <span class="text-red-500 ml-1">*</span>
                                        }
                                    </label>
                                    <p class="text-xs text-gray-500 dark:text-gray-400 mb-2">@field.Description</p>
                                    
                                    @if (field.Type == "textarea")
                                    {
                                        <textarea @bind="customizeValues[field.Id]" 
                                                  class="w-full px-3 py-2 border @(validationErrors.ContainsKey(field.Id) ? "border-red-500 dark:border-red-400" : "border-gray-300 dark:border-gray-600") rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                                  rows="3"
                                                  placeholder="@field.Placeholder"></textarea>
                                    }
                                    else if (field.Type == "select" && field.Options?.Any() == true)
                                    {
                                        <select @bind="customizeValues[field.Id]" 
                                                class="w-full px-3 py-2 border @(validationErrors.ContainsKey(field.Id) ? "border-red-500 dark:border-red-400" : "border-gray-300 dark:border-gray-600") rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                            <option value="">Select an option</option>
                                            @foreach (var option in field.Options)
                                            {
                                                <option value="@option">@option</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <input type="@GetInputType(field.Type)" 
                                               @bind="customizeValues[field.Id]" 
                                               class="w-full px-3 py-2 border @(validationErrors.ContainsKey(field.Id) ? "border-red-500 dark:border-red-400" : "border-gray-300 dark:border-gray-600") rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                               placeholder="@field.Placeholder" />
                                    }

                                    @if (validationErrors.ContainsKey(field.Id))
                                    {
                                        <p class="mt-1 text-sm text-red-600 dark:text-red-400">@validationErrors[field.Id]</p>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-8">
                                <p class="text-gray-500 dark:text-gray-400">No placeholders found in this prompt.</p>
                            </div>
                        }

                        <!-- Generated Prompt Section -->
                        @if (showGeneratedPrompt && !string.IsNullOrEmpty(generatedPrompt))
                        {
                            <div class="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
                                <div class="flex items-center gap-2 mb-4">
                                    @((MarkupString)SvgIcons.CheckCircle)
                                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Generated Prompt</h3>
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300">
                                        Ready to use
                                    </span>
                                </div>
                                
                                <div class="bg-green-50 dark:bg-green-900/10 border border-green-200 dark:border-green-800 rounded-lg p-4 mb-4">
                                    <div class="font-mono text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap">
                                        @generatedPrompt
                                    </div>
                                </div>

                                <div class="flex gap-3">
                                    <button @onclick="CopyOriginalPrompt" class="flex-1 px-4 py-2 text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 rounded-md flex items-center justify-center">
                                        @((MarkupString)SvgIcons.Copy)
                                        Copy Original Prompt
                                    </button>
                                    <button @onclick="CopyGeneratedPrompt" class="flex-1 px-4 py-2 text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 rounded-md flex items-center justify-center">
                                        @((MarkupString)SvgIcons.Copy)
                                        Copy Generated Prompt
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Footer Actions -->
            <div class="p-6 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 rounded-b-lg">
                @if (activeTab == 0)
                {
                    @if (isEditingPrompt)
                    {
                        <!-- Edit Mode Actions -->
                        <div class="flex items-center justify-between">
                            <button @onclick="CancelEdit" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600">
                                @((MarkupString)SvgIcons.RefreshCw)
                                Cancel
                            </button>
                            <button @onclick="SavePrompt" class="px-4 py-2 text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 rounded-md">
                                @((MarkupString)SvgIcons.Save)
                                Save
                            </button>
                        </div>
                    }
                    else
                    {
                        <!-- Original Prompt Tab Actions -->
                        <div class="flex items-center justify-between">
                            <div class="flex items-center gap-2">
                                <button @onclick="CopyContent" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600">
                                    @((MarkupString)SvgIcons.Copy)
                                    Copy Content
                                </button>
                                <button @onclick="ToggleFavorite" class="px-4 py-2 text-sm font-medium rounded-md border @(IsFavorite ? "border-red-200 bg-red-50 text-red-700 hover:bg-red-100 dark:border-red-800 dark:bg-red-900/20 dark:text-red-300" : "border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600")">
                                    @((MarkupString)SvgIcons.Heart)
                                    @(IsFavorite ? "Remove from Favorites" : "Add to Favorites")
                                </button>
                            </div>
                            <button @onclick="RatePrompt" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600">
                                @((MarkupString)SvgIcons.Star)
                                Rate Prompt
                            </button>
                        </div>
                    }
                }
                else
                {
                    <!-- Customize Tab Actions -->
                    <div class="flex items-center justify-between">
                        <button @onclick="ResetCustomizeForm" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600">
                            Reset
                        </button>
                        <button @onclick="GenerateCustomPrompt" 
                                disabled="@(!IsFormValid())"
                                class="px-6 py-2 text-sm font-medium text-white @(IsFormValid() ? "bg-purple-600 hover:bg-purple-700" : "bg-gray-400 cursor-not-allowed") rounded-md flex items-center">
                            @((MarkupString)SvgIcons.Settings)
                            Generate Custom Prompt
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}

